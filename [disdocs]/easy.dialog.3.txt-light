---

Ввести списки дочерних. Единственное, над чем подумать:

Список должен одновременно содержать список объектов первого уровня и всех подуровней, но они должны различаться

---

Ссылка на реплику в базе! Воспроизводит реплику без интерпретации вложенных реплик!

Например marker:talk_about_church

Где-то ставим в реплику:

link-source:talk_about_church

И теперь, мы ищем реплику в общей базе и забираем из неё всё, кроме настроек и вложенных реплик!

Так же можно сделать ссылку на настройки реплики, но нужно ли это?

link-sets:talk_about_church

---

Прыжок на локальную метку в диалоге. Прыжок на метку в базе реплик.

Подумать. Не проще ли завести пользовательские айдишники.

----

Настройки. Правильно ли хранить все настройки, либо только те, которые изменены. По-хорошему, чем меньше настроек, тем меньше памяти забивается. Однако это потребует вести проверку родительских настроек вплоть до получения самых древних. Система, где настройки писались в переменные только в момент интерпретации реплики гораздо эффективнее в плане быстродействия и объёма памяти, но она так же требует последовательного выхода из реплик, чтоб настройки откатывались назад постепенно. Или нет?

----

Новая структура.

Каждый диалог представляет собой отдельный объект со своими настройками и т.п. Раньше весь диалог представлял из себя исключительно дерево реплик, тогда как теперь и сам диалог будет иметь собственные параметры, как объект, и каждая реплика будет отдельным объектом.

Ветки диалога будут представлять собой пока что виртуальные объекты. Да, они будут иметь собственные настройки, но чтобы не плодить сущности, [или сущности всё же можно плодить, если диалог полностью будет генерироваться скриптом?] эти настройки будут закрепляться за узловыми репликами, от которых собственно и будут подхватываться настройки воспроизведения реплик.

По-прежнему диалог будет начинаться от корневой реплики, которая будет игнорироваться и лишь содержать начальные настройки при написании диалога.

Дополнительно, для диалога можно будет указывать роли, которые будут храниться в специальном кейсе ролей (ещё один отдельный объект, да).

Роль описывается пользовательским идентификатором роли. Например:

hero="name:%from_args%:name"

hero - это идентификатор роли. Здесь можно видеть, что вместо явно указаннрого имени подставлена конструкция "%from_args%", это значит, что при интерпретации диалога будет использовано имя, переданное интерпретатору с аргументами при вызове. Таким образом можно будет создавать неуникальные диалоги.

Должна быть возможность присоединять диалоги к диалогам, что очень удобное для проектирования RPG. Это позволит комбинировать ветки реплик для разных персонажей, чтобы давать разнообразие подаваемой информации.
