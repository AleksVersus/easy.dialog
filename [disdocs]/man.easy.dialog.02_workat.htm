<html>
   <head>
      <html>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
      <STYLE TYPE="text/css">
      <!--
         @page { size: 21cm 29.7cm; margin: 2cm }
         p { margin-left: 0.50cm }
         h1 { color:#000000; text-align:center; }
         h2 { color:#800000; text-align:center;}
         h3 { color:#ff8800;}
         h4 { color:#008800;}
         h5 { color:#008888;}
         tt { color:#000000;}
         div.emTAB {margin-left:3%;}
         pre.emTEXT {
            white-space: pre-wrap;
         }
         .preinf {
            text-align:justify;
            margin-left:50%;
            font-size:0.75em;
            text-indent:1em;
         }
         .postcont {
            text-align:center;
            margin-left:75%;
            width:25%;
            font-size:0.75em;
         }
         .bodyED {
            text-align:justify;
            margin-left:auto;
            margin-right:auto;
            width:55%;
            background-color:#ffffff;
            padding:0.5em 2em;
         }
         .centerED {
            margin-left:auto;
            margin-right:auto;
            padding:0.1em 2em;
            width:50%;
         }
         p.emCODE, pre.emCODE {
            margin-left:1em;
         }
         .emCODE {
            color:000000;
            font-family:monospace;
         }
         .emREMARK {
            color:#888888;
            font-weight:normal;
            font-style:italic;
         }
         .emHREF{text-decoration:none; color:#888888;}
         .emTOOL{text-decoration:none; color:#006688;}
         .emFUNC, .emOPRT, .emFOLD, .emTEXT, .emVAR, .emNUM, .emATTRIB, .emCOMMENT, .emMARKER {font-weight:bold; font-family:monospace;}
         .emFUNC {color:#ff8800;} /*цвет выделения функций*/
         .emOPRT {color:#008899;} /*цвет выделения операторов*/
         .emFOLD {color:#000000;background:#F6F6BC;} /*цвет выделения папок*/
         .emTEXT {color:#008800;} /*цвет выделения текстовых значений*/
         .emINCL {color:#006600;} /*цвет выделения вложенных текстовых значений*/
         .emVAR {color:#aa0000;}
         .emMARKER {color:#ff1111;}
         .emNUM {color:#880088; font-size:1.15em;}
         .emATTRIB {color:#000088;}
         .emCOMMENT {color:#888888;}
      -->
      </STYLE>
   </head>
<body bgcolor="F0E68C">
   <h1>easy.dialog.qsp v 2.0</h1>
   <div class="bodyED">
      <a name="easy_dialog_ingame"></a>
      <h2>Добавление диалогов в игру</h2>

<p>Теперь, когда исходный текст диалога подготовлен, его нужно добавить в игру.

<p>В первую очередь необходимо скопировать исходный текст (тело) диалога и присвоить его какой-нибудь переменной в игре. Я использую переменные, в названия которых включено слово <span class="emTEXT">"диалог"</span>:
<pre class="emCODE">
   $диалог<span class="emOPRT">[<span class="emTEXT">'пример'</span>]</span>=<span class="emTEXT">'npc="
         name:Ведущий:name
         ncolor:008888
         fcolor:008888
         "
         hero="
         name:Вася Пупкин:name
         "
         Это заголовок диалога. Его корень. Данные реплики будут выведены
         на экран как есть, без применения форматирования из настроек диалога.
         Тем не менее символы пробелов и табуляций перед строками, а также
         лишние переводы строк будут удалены.
         {:
            Как вас зовут?
            [:hero="ncolor:008800"
               Меня зовут Вася.
               {:Вас зовут Вася?
                  [:
                  npc="fcolor:880000"
                  Да, меня зовут Вася.
                     {:да ну нафиг:}
                     [:нет. чистая правда:]
                  :]
                  [:Нет, никто меня так не зовёт:]
               :}
               {:
                  Это правда, что вас зовут Васей?
                  [:Правда
                  :]
                  [:Неправда:]
               :}
            :]
            [:hero="ncolor:ff0000"
               Меня зовут Петя.
               {:
                  Вас зовут Петя?
                  [:Да{:Как это удобно!:}:]
                  [:Нет
                     {:Вас зовут не Петя? Как неудобно!:}
                  :]
               :}
               {:
                  Это правда, что вас зовут Петей?
                  [:Правда:]
                  [:Неправда:]
               :}
               {:Неужели в самом деле Петей Вас зовут?
                  [:В самом деле:]
                  [:Нет, не в самом:]
               :}
            :]
         :}'</span>
</pre>
<p>Теперь мы можем вызвать диалог в игре. Сделать это можно несколькими способами.

<h3>Прямое воспроизведение</h3>

<p>Это самый простой способ вызвать диалог в игре. Мы уже присвоили исходный текст переменной, теперь нам достаточно просто воспроизвести диалог. Для этого нужно воспользоваться интерпретатором диалогов, который уже встроен в модуль:
<pre class="emCODE">
   <span class="emOPRT">gosub</span> <span class="emTEXT">'dialog.int'</span>,$диалог<span class="emOPRT">[<span class="emTEXT">'пример'</span>]</span>
</pre>
<p>Здесь в качестве нулевого аргумента использован исходный текст диалога.

<p>Однако, хотя этот способ и самый простой, он заметно подвешивает игру. Воспользуйтесь первой версией [http://] модуля, если вам подходит именно этот способ, и время воспроизведения диалога сократится вдвое.

<p>Дело в том, что, если передавать исходный текст сразу интерпретатору, интерпретатор сначала преобразует исходный текст в удобную для воспроизведения форму, что требует времени. Тем не менее этот способ вполне подходит, если в игре у вас встречаются небольшие диалоги, которые нужно продемонстрировать лишь раз.

<h3>Воспроизведение с предварительной генерацией диалога</h3>

<p>Данный способ удобен, когда в игре создаётся много небольших диалогов, к которым игрок будет периодически возвращаться.

<p>Первым делом диалог преобразуется в удобную для воспроизведения форму (таблица данных диалогов, или таблица объектов диалогов). Для этого применяется генератор диалогов, который встроен в модуль. Именно генерация отнимает много времени у плеера, поэтому в игре запускать генератор нужно заранее и желательно в том месте, где игрок тратит время на что-то иное, например, на чтение текста. Лучше всего запускать генератор на той локации, на которой диалог может впервые понадобиться, или за пару локаций до неё. Вот как вызывается генератор:
<pre class="emCODE">
   <span class="emOPRT">gosub</span> <span class="emTEXT">'dialog.generate'</span>,$диалог<span class="emOPRT">[<span class="emTEXT">'пример'</span>]</span>,<span class="emTEXT">'уникальный_ID_диалога'</span>,<span class="emTEXT">''</span>
</pre>
<P>Посмотрите. В качестве нулевого аргумента мы передаём исходный текст диалога, а в качестве первого аргумента — уникальный ID диалога. Для каждого диалога вам нужно придумать свой собственный ID (идентификатор). В качестве второго аргумента здесь передаётся пустое значение (можно не писать).

<p>Генератор получит исходный текст диалога и преобразует его в удобную форму (таблица данных диалогов) и назначит ему в этой форме идентификатор. Для примера давайте дадим нашему диалогу идентификатор <span class="emTEXT">'диалог.с.васей'</span>. Вызов генератора тогда будет выглядеть так:
<pre class="emCODE">
   <span class="emOPRT">gosub</span> <span class="emTEXT">'dialog.generate'</span>,$диалог<span class="emOPRT">[<span class="emTEXT">'пример'</span>]</span>,<span class="emTEXT">'диалог.с.васей'</span>
</pre>
<p>Теперь, когда нам понадобится вызвать этот диалог на экран, мы обращаемся к интерпретатору следующим образом:
<pre class="emCODE">
   <span class="emOPRT">gosub</span> <span class="emTEXT">'dialog.int'</span>,<span class="emTEXT">'диалог.с.васей'</span>
</pre>
<p>Здесь в качестве нулевого аргумента использован идентификатор диалога. Интерпретатор сам поймёт, что вы ему передали: исходный текст, или идентификатор диалога.

<p>Если вы неправильно укажете идентификатор диалога, экран плеера очистится, и ничего больше на нём не появится.

<p>Этот способ, по сравнению с предыдущим, позволяет загружать диалог в десятки раз быстрее.

<h3>воспроизведение диалогов, сгенерированных заранее</h3>

<p>Этот способ хорош, когда требуется разместить в игре множество больших (сто-двести реплик) диалогов.

<p>Генерация большого диалога будет заметно подвешивать игру, поэтому был придуман способ, когда вы заранее преобразуете исходный текст диалога в удобную форму, и добавляете в игру диалог уже в этой самой удобной форме — таблица данных.

<p>Для того чтобы заранее сгенерировать диалог, нужно:<ul>
   <li>создать отдельную игру на QSP, и подключить[http://] к ней модуль <span class="emCODE">easy.dialog</span>.</li>
   <li>присвоить (как мы уже делали) исходный текст диалога переменной</li>
   <li>вызвать генератор, указав последним аргументом управляющее слово <span class="emTEXT">'get.objs'</span><br>
      Вот как бы выглядел вызов генератора в нашем случае:<br>
      <br>
      <pre class="emCODE">
    <span class="emOPRT">*pl</span> <span class="emFUNC">$func</span>(<span class="emTEXT">'dialog.generate'</span>,$диалог<span class="emOPRT">[<span class="emTEXT">'пример'</span>]</span>,<span class="emTEXT">'диалог.с.васей'</span>,<span class="emTEXT">'get.objs'</span>)
      </pre>
      <br></li>
   <li>запустить игру в плеере версии 5.7.0 (классический Quest Soft Player)<br>
      При этом на экране появится готовый код таблицы данных. Выглядеть он будет примерно так:
      <pre class="emCODE">
      <span class="emCOMMENT">! REPLIC_0</span>
      $id_replic[]=<span class="emTEXT">'диалог.с.васей.ХtaKnDwТ'</span>
      $source_replic[]=<span class="emTEXT">'да ну нафиг&lt;!-- type-replic:quest --&gt;'</span>
      $sets_replic[]=<span class="emTEXT">'npc="(name:Ведущий:name)
      (ncolor:008888)
      (nattrib:-b)
      (fcolor:880000)
      (fattrib:)
      (tire: — )"
      hero="(name:Вася Пупкин:name)
      (ncolor:008800)
      (nattrib:-i-b)
      (fcolor:888888)
      (fattrib:-i)
      (tire: — )"
      replics="(repeat:cicle)
      (shuffle:straight)"'</span>
      kolvo_replic[]=<span class="emNUM">0</span>
      $position_replic[]=<span class="emTEXT">'диалог.с.васей.IщIQЮsфJ'</span>

      ...

      <span class="emCOMMENT">! REPLIC_22</span>
      $id_replic[]=<span class="emTEXT">'диалог.с.васей'</span>
      $source_replic[]=<span class="emTEXT">'npc="
      name:Ведущий:name
      ncolor:008888
      fcolor:008888
      "
      hero="
      name:Вася Пупкин:name
      "
      Это заголовок диалога. Его корень. Данные реплики будут выведены
      на экран как есть, без применения форматирования из настроек диалога.
      Тем не менее символы пробелов и табуляций перед строками, а также
      лишние переводы строк будут удалены.
      &lt;!-[count-tag:23]-!&gt;'</span>
      $sets_replic[]=<span class="emTEXT">'npc="(name:Ведущий:name)
      (ncolor:008888)
      (nattrib:-b)
      (fcolor:008888)
      (fattrib:)
      (tire: — )"
      hero="(name:Вася Пупкин:name)
      (ncolor:888888)
      (nattrib:-i-b)
      (fcolor:888888)
      (fattrib:-i)
      (tire: — )"
      replics="(repeat:cicle)
      (shuffle:straight)"'</span>
      kolvo_replic[]=<span class="emNUM">0</span>
      $position_replic[]=<span class="emTEXT">''</span>
      <span class="emCOMMENT">! диалог сгенерирован за 219 мсек.</span>
      </pre></li>
   <li>этот код нужно полностью выделить и скопировать (нажимаем на клавиатуре клавиши <a class="emTOOL" title="Ctrl+C">Ctrl и C</a>)</li>
   <li>затем, переходим в игру, в которой мы собираемся разместить этот диалог и <a class="emTOOL" title="Ctrl+V">вставляем</a> полученный код на локацию, где диалог будет вызываться впервые (или за пару локаций до неё). Можно разместить все диалоги в виде таблицы данных на самой первой локации игры, но этого лучше не делать. Присвоение значений переменным тоже отнимает время у плеера.</li></ul>
<p>Всё. Заранее сгенерированный диалог вставлен в игру. Теперь плеер не будет тратить время на генерацию нескольких сотен реплик. Вызов диалога ничем не отличается от предыдущего способа — в том месте игры, где нам нужно вызвать диалог, пишем:
<pre class="emCODE">
   <span class="emOPRT">gosub</span> <span class="emTEXT">'dialog.int'</span>,<span class="emTEXT">'диалог.с.васей'</span>
</pre>
<p>Время загузки диалога такое же, как и для предыдущего способа.

<h3>Воспроизведение диалогов, сгенерированных заранее, и подгружаемых в процессе игры</h3>

<p>Данный способ необходим тем, кто использует в игре диалоги намного большего размера, чем 100-200 реплик. Это гигантские диалоги.

<p>Даже если заранее сформировать таблицу данных такого диалога, выполнение её кода будет заметно подвешивать игру, поэтому был придуман способ, как разнести выполнение кода во времени, чтобы оно было незаметно игроку.

<p>К сожалению, данный способ не вполне автоматизирован и требует глубокого понимания структуры вашей игры и принципов работы QSP. Многие моменты придётся дописывать руками.

<p>Как и в предыдущем способе, генерируем таблицу данных диалога заранее в отдельной игре, но вместо управляющего слова <span class="emTEXT">'get.objs'</span> используем управляющее слово <span class="emTEXT">'get.base'</span>:
<pre class="emCODE">
   <span class="emOPRT">*pl</span> <span class="emFUNC">$func</span>(<span class="emTEXT">'dialog.generate'</span>,$диалог<span class="emOPRT">[<span class="emTEXT">'пример'</span>]</span>,<span class="emTEXT">'диалог.с.васей'</span>,<span class="emTEXT">'get.base'</span>)
</pre>
</span>
<p>При этом формируется QSP-код таблицы данных диалога, немного отличающийся от кода в предыдущем способе:
<pre class="emCODE">
   <span class="emMARKER">:DIALOG_0</span>
   <span class="emCOMMENT">! REPLIC_0</span>
   $id_replic[]=<span class="emTEXT">'диалог.с.васей.o84уИOоf'</span>
   $source_replic[]=<span class="emTEXT">'да ну нафиг&lt;!-- type-replic:quest --&gt;'</span>
   $sets_replic[]=<span class="emTEXT">'&lt;!-- ... --&gt;'</span>
   kolvo_replic[]=<span class="emNUM">0</span>
   $position_replic[]=<span class="emTEXT">'диалог.с.васей.ЧАёIIУTi'</span>
   <span class="emCOMMENT">! REPLIC_1</span>
   $id_replic[]=<span class="emTEXT">'диалог.с.васей.onIршobи'</span>
   $source_replic[]=<span class="emTEXT">'нет. чистая правда&lt;!-- type-replic:answer --&gt;'</span>
   $sets_replic[]=<span class="emTEXT">'&lt;!-- ... --&gt;'</span>
   kolvo_replic[]=<span class="emNUM">0</span>
   $position_replic[]=<span class="emTEXT">'диалог.с.васей.ЧАёIIУTi'</span>
   <span class="emCOMMENT">! REPLIC_2</span>
   ...
   <span class="emCOMMENT">! REPLIC_9</span>
   $id_replic[]=<span class="emTEXT">'диалог.с.васей.UьМYиIяЯ'</span>
   $source_replic[]=<span class="emTEXT">'Как это удобно!&lt;!-- type-replic:quest --&gt;'</span>
   $sets_replic[]=<span class="emTEXT">'&lt;!-- ... --&gt;'</span>
   kolvo_replic[]=<span class="emNUM">0</span>
   $position_replic[]=<span class="emTEXT">'диалог.с.васей.DАцvSGFr'</span>
   <span class="emOPRT">jump</span> <span class="emTEXT">'end_sel'</span>
   <span class="emMARKER">:DIALOG_1</span>
   <span class="emCOMMENT">! REPLIC_10</span>
   $id_replic[]=<span class="emTEXT">'диалог.с.васей.DАцvSGFr'</span>
   $source_replic[]=<span class="emTEXT">'Да&lt;!-- type-replic:answer --&gt;'</span>
   $sets_replic[]=<span class="emTEXT">'&lt;!-- ... --&gt;'</span>
   kolvo_replic[]=<span class="emNUM">0</span>
   $position_replic[]=<span class="emTEXT">'диалог.с.васей.icМяКhнЁ'</span>
   <span class="emCOMMENT">! REPLIC_11</span>
   ...
   <span class="emCOMMENT">! REPLIC_19</span>
   $id_replic[]=<span class="emTEXT">'диалог.с.васей.TЦktргГL'</span>
   $source_replic[]=<span class="emTEXT">'Неужели в самом деле Петей Вас зовут?
   &lt;!-- type-replic:quest --&gt;'</span>
   $sets_replic[]=<span class="emTEXT">'&lt;!-- ... --&gt;'</span>
   kolvo_replic[]=<span class="emNUM">0</span>
   $position_replic[]=<span class="emTEXT">'диалог.с.васей.YuьcWhwK'</span>
   <span class="emOPRT">jump</span> <span class="emTEXT">'end_sel'</span>
   <span class="emMARKER">:DIALOG_2</span>
   <span class="emCOMMENT">! REPLIC_20</span>
   $id_replic[]=<span class="emTEXT">'диалог.с.васей.YuьcWhwK'</span>
   $source_replic[]=<span class="emTEXT">'hero="ncolor:ff0000"
   Меня зовут Петя.
   &lt;!-- type-replic:answer --&gt;'</span>
   $sets_replic[]=<span class="emTEXT">'&lt;!-- ... --&gt;'</span>
   kolvo_replic[]=<span class="emNUM">0</span>
   $position_replic[]=<span class="emTEXT">'диалог.с.васей.1зEП7XA7'</span>
  <span class="emCOMMENT"> ! REPLIC_21</span>
   $id_replic[]=<span class="emTEXT">'диалог.с.васей.1зEП7XA7'</span>
   $source_replic[]=<span class="emTEXT">'Как вас зовут?
   &lt;!-- type-replic:quest --&gt;'</span>
   $sets_replic[]=<span class="emTEXT">'&lt;!-- ... --&gt;'</span>
   kolvo_replic[]=<span class="emNUM">0</span>
   $position_replic[]=<span class="emTEXT">'диалог.с.васей'</span>
   <span class="emCOMMENT">! REPLIC_22</span>
   $id_replic[]=<span class="emTEXT">'диалог.с.васей'</span>
   $source_replic[]=<span class="emTEXT">'npc="
   name:Ведущий:name
   ncolor:008888
   fcolor:008888
   "
   hero="
   name:Вася Пупкин:name
   "
   Это заголовок диалога. Его корень. Данные реплики будут выведены
   на экран как есть, без применения форматирования из настроек диалога.
   Тем не менее символы пробелов и табуляций перед строками, а также
   лишние переводы строк будут удалены.
   &lt;!-[count-tag:23]-!&gt;'</span>
   $sets_replic[]=<span class="emTEXT">'&lt;!-- ... --&gt;'</span>
   kolvo_replic[]=<span class="emNUM">0</span>
   $position_replic[]=<span class="emTEXT">''</span>
   <span class="emOPRT">jump</span> <span class="emTEXT">'end_sel'</span>
   <span class="emCOMMENT">! диалог сгенерирован за 246 мсек.</span>
</pre>
<p>Здесь опущены реплики и значения массива <span class="emCODE">$sets_replic[]</span>, чтобы сократить запись.

<p>Как видно, здесь код разбит на блоки с помощью меток типа <span class="emMARKER">:DIALOG_##</span> и команды <span class="emOPRT">jump</span> <span class="emTEXT">'end_sel'</span>. Если у вас в игре будет несколько диалогов, старайтесь сделать генерацию заранее и в одной игре, чтобы номера меток не повторялись.

<p>Теперь в игре, где у нас должны появиться эти диалоги делаем следующее:
   <ul>
   <li>создаём локацию с названием <span class="emTEXT">'base.dialog'</span></li>
   <li>на локации <span class="emTEXT">'base.dialog'</span> вставляем сгенерированный код таблицы данных диалогов (если диалогов несколько — код всех диалогов, — и следим, чтобы нумерация меток шла по порядку и номера не повторялись).</li>
   <li>запоминаем номер последней метки на локации <span class="emNUM">+1</span> (например, если последняя метка <span class="emMARKER">:DIALOG_22</span> — запоминаем <span class="emNUM">23</span>)</li>
   <li>добавляем строку в самом низу локации и пишем:
<pre class="emCODE">
      DIALOG_VALUE<span class="emOPRT">[<span class="emTEXT">'replics.counter'</span>]</span>+=<span class="emNUM">1</span>
</pre>
      Эта строка будет увеличивать счётчик на единицу при каждом обращении к локации
</li>
   <li>добавляем строку в самом верху локации и пишем:
<pre class="emCODE">
      <span class="emOPRT">jump</span> <span class="emTEXT">'DIALOG_'</span>+<span class="emFUNC">str</span>(DIALOG_VALUE<span class="emOPRT">[<span class="emTEXT">'replics.counter'</span>]</span>)
</pre>
   </li>
   <li>создаём локацию <span class="emTEXT">"counter"</span>, либо работаем в уже созданной, не забывая присвоить соответствующее значение переменной $counter</li>
   <li>на локации <span class="emTEXT">"counter"</span> пишем строчку:
<pre class="emCODE">
      <span class="emOPRT">if</span> DIALOG_VALUE<span class="emOPRT">[<span class="emTEXT">'replics.counter'</span>]</span>&lt;<span class="emNUM">23</span>: <span class="emOPRT">gosub</span> <span class="emTEXT">'base.dialog'</span>
</pre>
     </li>
     <li> Вместо числа <span class="emNUM">23</span> пишем то число, которое запомнили.</li>
</ul>
<p>Теперь каждые пол секунды (или с другой частотой, в зависимости от настроек) плеер будет добавлять в таблицу данных 10 реплик из диалога. Таким образом в память плеера диалоги будут подгружаться незаметно для игрока, даже если они очень большие (гигантские). При воспроизведении диалога через интерпретатор (<span class="emOPRT">gosub</span> <span class="emTEXT">'dialog.int'</span>,<span class="emTEXT">'диалог.с.васей'</span>), он по-прежнему будет загружаться за несколько миллисекунд, как и в предыдущих двух случаях.

<h5>Примечание:</h5>
Если для добавления диалога в игру вы пользуетесь одним из двух последних способов, в самом начале игры создайте в таблице данных диалогов пустую реплику. Сделать это можно так:
<pre class="emCODE">
$id_replic[]=<span class="emTEXT">'DIALOGS'</span>
$source_replic[]=<span class="emTEXT">'&lt;dialogs&gt;'</span>
$sets_replic[]=<span class="emTEXT">''</span>
kolvo_replic[]=<span class="emNUM">0</span>
$position_replic[]=<span class="emTEXT">''</span>
      <div class="postcont">
         <br><br><br>Aleks Versus'easy.libraries'2017<br>Aleks Versus'GAM'RUS'2017
      </div>
   </div>
</body>
</html>
